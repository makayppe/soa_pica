<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="047b744c-ba48-4711-958b-c0222363c44b" activeEnvironment="Default" name="Mock_SWIFT" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="e18488cd-5954-4f0d-ad77-84a4efd36211" port="9088" path="/SWIFTinternacional" host="YESELINPC" name="REST_InternacionalPaymentSWIFT" docroot=""><con:settings/><con:properties/><con:restMockAction name="/AddPayments" method="POST" resourcePath="/AddPayments" id="8fa52ddf-3192-4ccc-9189-782d672c9649"><con:settings/><con:defaultResponse>ResponseAddPayments</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="ResponseAddPayments" id="62d3e7a2-1e51-4910-8071-712f504132e7" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "targetAccountNumber": "12356ASDF78546",
  "targetBankCode": "BK444",
  "operationIdentifier": "SAVED"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/CancelPayments" method="POST" resourcePath="/CancelPayments" id="8ef2da34-61e9-41ff-8d13-f1c33be1df07"><con:settings/><con:defaultResponse>ResponseCancelPayments</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="ResponseCancelPayments" id="eb5ec936-0ea1-4711-859d-76efbe0320e6" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "value": 140000,
  "targetBankCode": "BK444",
  "operationIdentifier": "CANCELED"
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>